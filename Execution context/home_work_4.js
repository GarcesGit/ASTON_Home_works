/* 
Базовый:
1. Написать ответ - почему массивы в JS являются "неправильными" и совмещают в себе несколько
структур данных? Какие ?

Массивы совмещают в себе следующие структуры данных:
Хэш-таблицы - массивы это особый тип объекта, предназначенный для работы с упорядоченным набором элементов.
Очередь - массивы поддерживают операции: push - добавляет элемент в конец, shift - удаляет элемент в начале.
Стек - массивы поддерживают операции: push - добавляет элемент в конец, pop - удаляет последний элемент.
Двустронняя очередь - массивы могут работать и как очередь, и как стек - добавлять/удалять элементы как в начало, так и в конец массива.
Типы элементов массива не являются фиксированными. Можно хранить значения любого типа в одном массиве.
 */

// 2. Привязать контекст объекта через bind, call, apply.

const obj = { item: "some value" };

function logger() {
    console.log(`I output only external context: ${this.item}`);
}

logger.call(obj);

logger.apply(obj);

const loggerBind = logger.bind(obj);
loggerBind();

// Продвинутый:
// 1. Реализовать полифил (собственную функцию реализующую встроенную в js) метода bind()

Function.prototype.customBind = function (context, ...args) {
    boundThis = this;
    let params = args.slice(1);

    return function (...args2) {
        boundThis.apply(context, [...params, ...args2]);
    };
};
